import {query#COMPONENT_UPPER#, update#COMPONENT_UPPER#, delete#COMPONENT_UPPER# , add#COMPONENT_UPPER#, } from '@/services/#COMPONENT_LOWER#';

export default {
  namespace: '#COMPONENT_LOWER#',

  state: {
    data: {
      list: [],
      pagination: {},
    },
  },

  effects: {
    *fetch({ payload }, { call, put }) {
      const response = yield call(query#COMPONENT_UPPER#, payload);
      yield put({
        type: 'save',
        payload: response,
      });
    },
    *add({ payload, callback }, { call, put }) {
      const response = yield call(add#COMPONENT_UPPER#, payload);
      yield put({
        type: 'save',
        payload: response,
      });
      if (callback) callback();
    },
    *delete({ payload, callback }, { call, put }) {
      const response = yield call(delete#COMPONENT_UPPER# , payload);
      yield put({
        type: 'save',
        payload: response,
      });
      if (callback) callback();
    },
    *update({ payload, callback }, { call, put }) {
      const response = yield call(update#COMPONENT_UPPER#, payload);
      yield put({
        type: 'save',
        payload: response,
      });
      if (callback) callback();
    },
  },

  reducers: {
    save(state, action) {
      return {
        ...state,
        data: action.payload,
      };
    },
  },
};
